name: 'colcon_test'
description: 'Execute colcon test command with arguments given'

inputs:

  colcon_test_args:
    description: 'args to pass to colcon test command (use ctest_args to set ctest arguments)'
    required: false
    default: ''

  colcon_test_args_default:
    description: 'Default args to pass to colcon test command (use ctest_args to set ctest arguments)'
    required: false
    default: '--event-handlers=console_direct+ --return-code-on-test-failure'

  ctest_args:
    description: 'args to pass to colcon test command'
    required: false
    default: ''

  ctest_args_default:
    description: 'Default args to pass to colcon test command'
    required: false
    default: '--timeout 60'

  packages_names:
    description: 'Name of the colcon packages to build and test'
    required: true

  workspace:
    description: 'Workspace where built has been done'
    required: false
    default: '${{ github.workspace }}'

  workspace_dependencies:
    description: 'Workspace to source where dependencies are'
    required: false
    default: ''

runs:
  using: composite
  steps:

    - name: Build workspace with colcon
      shell: pwsh
      run: |

        Write-Host "::group::Run tests using colcon"

        if ([string]::IsNullOrEmpty("${{ inputs.workspace_dependencies }}")) {
          ${{ inputs.workspace_dependencies }}/setup.ps1
        }

        cd ${{ inputs.workspace }}
        $resultsPath = "${{ inputs.workspace }}\test_results"
        New-Item -ItemType Directory -Path $resultsPath

        Write-Host "::endgroup::"

        $exitCode = 0
        $packages_names = "${{ inputs.packages_names }}" -split '\s+'

        foreach ($package in $packages_names) {
          Write-Host "::group::Testing $package ..."

          $testCommand = @"
            colcon test
              ${{ inputs.colcon_test_args_default }}
              ${{ inputs.colcon_test_args }}
              --packages-select $package
              --ctest-args
                ${{ inputs.ctest_args_default }}
                ${{ inputs.ctest_args }}
                --output-junit $resultsPath
        "@

          $testCommand = $testCommand -replace "[`r`n\t\s]+", " " -replace '^\s+', ''

          Invoke-Expression $testCommand

          if ($lastexitcode -ne 0) {
            $exitCode = $lastexitcode
          }

          Write-Host "::endgroup::"
        }

        Exit $exitCode

    - name: Upload results
      uses: eProsima/eProsima-CI/external/upload-artifact@main
      if: success() || failure()
      with:
          name: test_results
          path: ${{ inputs.workspace }}\test_results
